{"version":3,"sources":["components/AddBookButton.js","components/AddBookForm.js","components/BookRow.js","components/BookTable.js","App.js","serviceWorker.js","index.js"],"names":["AddBookButton","showForm","formShowing","id","className","onClick","AddBookForm","state","title","author","genre","read","handleChange","e","console","log","setState","target","value","handleSubmit","preventDefault","props","addBook","onSubmit","this","htmlFor","type","onChange","name","Component","BookRow","book","removeBook","bookRead","BookTable","rows","books","map","key","App","handleShowForm","Math","random","filter","index","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.497f80eb.chunk.js","sourcesContent":["import React from 'react' \n\nconst AddBookButton = ({ showForm, formShowing }) => {\n    return (\n        <div>\n            <button id=\"custom-button\" className=\"btn-floating\" onClick={(() => showForm)()}>\n                {\n                  formShowing ? \"-\" : \"+\"  \n                }\n            </button>\n        </div>\n    )\n}\n\nexport default AddBookButton","import React, { Component } from 'react'\n\nclass AddBookForm extends Component  {\n    state = {\n        title: null, \n        author: null,\n        genre: null, \n        read: null\n    }\n\n    handleChange = (e) => {\n        console.log(this.state)\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    handleSubmit = (e) => {\n        console.log(this.state)\n        e.preventDefault();\n        this.props.addBook(this.state);\n        this.props.showForm();\n    }\n    render(){\n        return (\n            <div>\n                <div>\n                    <form id=\"bookfor\" onSubmit={this.handleSubmit }>\n                        <div>\n                            <label htmlFor=\"title\">Title</label>\n                            <input type=\"text\" id=\"title\" onChange={this.handleChange} />\n                            <label htmlFor=\"author\">Author</label>\n                            <input type=\"text\" id=\"author\" onChange={this.handleChange}/>\n                            <label htmlFor=\"genre\" >Genre</label>\n                            <input type=\"text\" id=\"genre\" onChange={this.handleChange}/>\n                        </div>\n                        <div>\n                            <label>\n                                <input type=\"radio\" id=\"read\" name=\"read\" value={true} onChange={this.handleChange} />\n                                <span>Read</span>\n                            </label><br/>\n                            <label>\n                                <input type=\"radio\" id=\"read\" name=\"read\" value={false} onChange={this.handleChange}/>\n                                <span>Want to read</span>\n                            </label>\n                        </div>\n                        <div>\n                            <button className=\"btn-small\" type=\"submit\" value=\"Submit\">Submit</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n    \n}\n\nexport default AddBookForm","import React from 'react'\n\nconst BookRow = ({ book, removeBook, bookRead }) => {\n    return (\n        <tr>\n            <td>{book.title}</td>\n            <td>{book.author}</td> \n            <td>{book.genre}</td> \n            <td className=\"center-align\">\n                {\n                    book.read ? (\n                        <button className=\"btn-small green lighten-2\"onClick={() => {bookRead(book.id)}}>Read</button>\n                    ) : (\n                        <button className=\"btn-small blue lighten-2\"onClick={() => {bookRead(book.id)}}>Want to read</button>  \n                    )\n                }\n            </td> \n            <td className=\"center-align\"><button className=\"btn-small red lighten-2\" onClick={() => {removeBook(book.id)}}>Delete Book</button></td> \n        </tr>\n    )\n}\n\nexport default BookRow \n\n        \n\n","import React, { Component } from 'react'\nimport BookRow from './BookRow'\n\nclass BookTable extends Component  {\n    render(){\n        const rows = this.props.books.map((book) => {\n            console.log(book.id)\n            return (\n                <BookRow \n                    key={book.id}\n                    book={book}\n                    removeBook={this.props.removeBook}\n                    bookRead={this.props.bookRead}\n                />\n            ) \n        })\n        return (\n            <div>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Title</th>\n                            <th>Author</th>\n                            <th>Genre</th>\n                            <th></th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {rows}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default BookTable","import React, { Component } from 'react';\nimport AddBookButton from './components/AddBookButton'\nimport AddBookForm from './components/AddBookForm'\nimport BookTable from './components/BookTable'\n\n\nclass App extends Component {\n  state = {\n    formShowing: false, \n    books: [\n      {\n        title: 'Kafka on the Shore',\n        author: 'Haruki Murakami',\n        genre: 'fiction',\n        read: true,\n        id: 1,\n      },\n      {\n        title: 'Natives',\n        author: 'Akala',\n        genre: 'Non-fiction',\n        read: true,\n        id: 2,\n      },\n      {\n        title: 'Game of Thrones',\n        author: 'George R.R Martin',\n        genre: 'fiction',\n        read: false,\n        id: 3,\n      },\n    ]\n\n  }\n\n  handleShowForm = () => {\n    this.state.formShowing ? (\n      this.setState({\n        formShowing: false,\n      })\n    ) : (\n      this.setState({\n        formShowing: true,\n      })\n    )\n  }\n\n  addBook = (book) => {\n    book.id = Math.random();\n    let books = [...this.state.books, book];\n    this.setState({\n      books: books\n    })\n  }\n\n  removeBook = (id) => {\n    let books = this.state.books.filter(book => {\n      return book.id !== id \n    })\n    this.setState({\n      books: books\n    })\n  }\n\n  bookRead = (id) => {\n    let books = this.state.books\n    for (let book of this.state.books){\n      if (book.id === id){      \n        let index = this.state.books.indexOf(book)\n        books[index].read ? books[index].read = false : books[index].read = true\n        this.setState({\n          books: books\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"container-custom\" className=\"App container grey lighten-4\">\n        <AddBookButton showForm={this.handleShowForm} formShowing={this.state.formShowing} />\n        {this.state.formShowing ? (\n          <AddBookForm addBook={this.addBook} showForm={this.handleShowForm}/> \n        ) : (\n          <BookTable books={this.state.books} removeBook={this.removeBook} bookRead={this.bookRead}/>\n        )}  \n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}